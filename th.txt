REACT JS : librabry : remix,vite,next

MERN : m ,EXPRESS  jS


NODE JS:
middleware:express | NEST 



npm i express 
npm i express --dev
npm i express --g

npm install nodemon -g

app.js --> routes files -->api end point register --> Controller --> model[database table]

ORM  object relational mapping:

object --> schema --> mongodb db -->collection bind..

db.users.find()
userModel.find()


role table:
admin
useer
maneger

user:
roleId fk

create table user(id int primary key auto_increment, 
roleId int, foreign key(roleId) references role(id));

insert into role values(1,'admin');
insert into user(1,1)

select * from users;

joins
populate
api request validation....


AUTH:

auth  :
autho :

password encrypton

MVC: email password:CSRF
APIs: secure : eamil password : token --> user : object

outh2 security:
token based security

bearer token:

login : email -password --> token : user object wrap:
login : email -password --> token : user.id token:

 try{

                const user = jwt.verify(token,SECRET)
                    user == user._id
                    db exists -->next:
                    role:
                    api target: manager


                console.log(user)
                next()

 }



16 min --> fe requestub ===> exptopn token -->refresh-->
catch(err){
	if(jwt type){
		exipry --> cookeies --> refreshtoken ---> acess
			api -->getToken --> refreshToken --> db -->
				user --> id ->accesstoken --> localstrore:
	}
	}
cookies


browser 1       - - brwser 2
token delete        access --> 16 min expire  --> accessto
ref acc no	     db --->token: logout	

login:
access
refres

update



logout from all



frontend login : accesstoken: 10 min valid... 11th min accesstoken excetpon token is expired



cookies -->refreshtok pass -->




try{
axio.get()
}cathc(err){

    //token expire...
    //cookeies.refreshtoken()

}


accsstoken:- every api call.... middleware check... accesstoken --> short time span --> 10 min
token expire -->


amazone --> login --> accessToken --->


products --> accessToken --> 11 min excetpon -- tokenExpriation

catch(err){

    if(tokenExpriation){

            //refreshtokn -->
            axios.post("/access-token",headers: { Authorization: `Bearer ${refreshToken}` })
    }

}

create new api for generation of accesstoken --> refreshtoken


generate access-toke(){

    //req.headers. == refreshToken: _id
    //refreshtoken db get
    db->token --> userobject-->
    //generatee new accessToken _id -->

    while getting token from db --> but there are chnace token expired: replace-->
    


}



//addUSer --> token [refreshTOke] -->6 month --> databse store...
//login..... accesstoken --> value _id
//every api call --> accesstoken -->validate middleare -->
//expire -->
new api /auth/access-token
this api will accept   and give new accessToken

------------------------------------------------------

component all users:

--->localstoreg --- token --> api call,token pass....
1 min data --> refresh exception... try catch -->
catch 
localhost:3002/user/genereateaccesstoken
res accesToken ---> localstoreg.. useEffect.,,


Authentication:
Authorization:

getUsers --- >manager admin...



domain www.3000 --> 3001 [backend...]
CORS policy
backedn cors policy enable cors

npm i cors


file: -->copy -->paste --> 
database:
server  : aws server --> pc --> local folder--
cloud storage: aws s3,drive,cloudinary,

multer 





//redis connecction
const redisConnection = new Redis({
    host:"127.0.0.1",
    port:"6379"
    
})

const myQueue = new Queue("taskQueue",{connection:redisConnection})

app.post("/add-job",async(req,res)=>{
    const {name} =req.body
    //business logic.. mail
    await myQueue.add("task",{name},{delay:0})
    res.json({
        message:"job added..."
    })

})

const fakeData={
    1:{name:"ram",age:22},
    2:{name:"rajvi",age:23},
    3:{name:"ajay",age:25},
    4:{name:"raj",age:26},
    5:{name:"parth",age:22},
}

const CACHE_EXPIRY = 600;
const cache_Middleware=async(req,res,next)=>{

    const {userId} = req.params;
    try{

        const cacheData = await redisConnection.get(userId)
        console.log("ca.....",cacheData)
        if(cacheData){
            console.log("cache hit...")
            res.status(200).json({
                message:"data fetch...",
                data:JSON.parse(cacheData)
            })
        }
        else{
            console.log("cache missed...")
            next()
        }

    }catch(err){

        res.status(500).json({
            message:"error while fetching data.."
        })
    }


}

app.get("/getdatabyuserid/:userId",cache_Middleware,(req,res)=>{


    const {userId}= req.params;
    const userData = fakeData[userId];
    //cacheData...
    redisConnection.setex(userId,CACHE_EXPIRY,JSON.stringify(userData))
    res.status(200).json({
        message:"data fetch...",
        data:userData
    })
    

})

